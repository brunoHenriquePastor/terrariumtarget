name: Pipeline CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  build:

    runs-on: ubuntu-18.04
    env:      
    #   DOCKER_REGISTRY: brunohenriquep180@gmail.com      
      DOCKER_IMAGE: bhpdocker/terrarium_target:tagname      
    #   DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #   DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  
    #   DOCKER_TARGET_PLATFORM: linux/arm/v8
    # container: 
    #   image: arm64v8/python
  

    steps:

    # Get the repository's code
    - name: Checkout
      uses: actions/checkout@v2
      # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: login to docker hub
      run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: build the image
      run: |
        docker buildx build \
          --tag ${{ env.DOCKER_IMAGE }} \
          --platform linux/arm64  .









    # -
    #   name: Build and export to Docker
    #   uses: docker/build-push-action@v3
    #   with:
    #     context: .
    #     load: true
    #     tags: ${{ env.DOCKER_IMAGE }}
    # -
    #   name: Test
    #   run: |
    #     docker run --rm ${{ env.DOCKER_IMAGE }}
    # -
    #   name: Build and push
    #   uses: docker/build-push-action@v3
    #   with:
    #     context: .
    #     platforms: linux/amd64,linux/arm64,linux/arm/v7
    #     push: true
    #     tags: ${{ env.DOCKER_IMAGE }}


  # test:
  #   runs-on: ubuntu-18.04 

  #   needs: [build]


  #   steps:
    

    # - name: Install dependencies
    #   run: |
    #     python -m pip install --upgrade pip
    #     pip install pylint
  
    # - name: Analysing the code with pylint
    #   run: |
    #     pylint $(git ls-files '*.py')
    - name: Analysing the code with doctest
      run: |
        python -m doctest -v test/test_with_doctest.py 



    # delivery:

  #   runs-on: ubuntu-18.04
  #   needs: [test]
  #   container: 
  #      image: bhpdocker/terrarium_target:latest
  #   # 
  #   # defaults:
  #   #   run:
  #   #     working-directory: app
  #   #     shell: bash
    



  #   steps:

    - name: Docker Push
      uses: docker/build-push-action@v2
      with:
        context: .
        platforms: linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.<meta_id>.outputs.tags }}
        labels: ${{ steps.<meta_id>.outputs.labels }}
      #run: docker push ${{ env.DOCKER_IMAGE }}









    #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


    # - name: Login to Docker Hub
    #   uses: docker/build-push-action@v1
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_TOKEN }}

    # - uses: docker/build-push-action@v2
    # - name: Build the Docker image
    #   run: |
    #     echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    #     docker image build -t bhpdocker/terrarium_target:latest .
    
    # - name: Prepare      
    #   if: success()      
    #   id: prepare      
    #   run: |        
    #     echo ::set-output name=docker_platform::${DOCKER_TARGET_PLATFORM}        
    #     echo ::set-output name=docker_image::${DOCKER_REGISTRY}/${DOCKER_IMAGE}        
    #     echo ::set-output name=version::${GITHUB_RUN_NUMBER}   

    # - name: Docker Login      
    #   if: success()      
    #   run: |        
    #     echo "${DOCKER_PASSWORD}" | docker login ${DOCKER_REGISTRY} --username "${DOCKER_USERNAME}" --password-stdin
    # - name: Run Buildx (push image)      
    #   if: success()      
    #   run: |        
    #       docker buildx build \        
    #       --platform ${{ steps.prepare.outputs.docker_platform }} \             
    #       --tag ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }} \        
    #       --file ./Dockerfile \        
    #       --output type=image,push=true .




    # - name: Setup Python
    #   uses: actions/setup-python@v4.2.0
    #   with:
    #     # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
    #     python-version: # optional
    #       arm32v7/python:3
      
    #     cache: # optional
    #       x86

    #     architecture: # optional
    #       linux/arm32v7
        

    # - name: Build and push
    #   if: github.event_name == 'pull_request'
    #   id: docker_build
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: ./app
    #     file: ./app/Dockerfile
    #     push: true
    #     tags: ${{ secrets.DOCKER_USERNAME }}/app:${{ steps.buildnumber.outputs.build_number }}








  # test:
  #   runs-on: ubuntu-18.04 
  #   env:          
  #         DOCKER_IMAGE: bhpdocker/terrarium_target:tagname   

  #   needs: [build]
  #   container: 
  #     image: bhpdocker/terrarium_target:tagname


  #   strategy:
  #     matrix:
  #       python-version: ["3.8", "3.9", "3.10"]
  #   steps:


  #   - name: Analysing the code with pylint
  #     run: |
  #       pylint $(git ls-files '*.py')
  #   - name: Analysing the code with doctest
  #     run: |
  #       - python -m doctest -v test/test_with_doctest.py 










  #   - uses: actions/checkout@v3
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install pylint
  



  # delivery:

  #   runs-on: [self-hosted, linux, ARM64]
  #   needs: [test]
  #   container: 
  #      image: bhpdocker/terrarium_target:latest
  #   #   env:
  #   #     NODE_ENV: arduinoEnv

  #   # defaults:
  #   #   run:
  #   #     working-directory: app
  #   #     shell: bash
    
  #   # env:
  #   #     RUNNER_ARCH : ARM



  #   steps:
    
  #   - name: Build package
  #     run: python -m build
  #   - name: Publish package
  #     uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}











# stages:
#   - build
#   - test
#   - delivery

# variables:
#   IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME

# build:
#   image: docker:latest 
#   services:
#     - docker:dind
#   stage: build

#   script:
#       - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
#       - docker buildx build --platform linux/arm,linux/arm64,linux/amd64 -t $IMAGE_NAME .
#   tags:
#     - docker


# test:
#   image: $IMAGE_NAME
#   stage: test
#   script:
#       - python -m doctest -v test/test_with_doctest.py 
#   tags:
#     - docker  

# delivery:
#   image: docker
#   stage: delivery
#   services:
#      - name: docker:dind
#   script:
#     - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD 
#     - docker buildx build --platform linux/arm,linux/arm64,linux/amd64 -t $CI_REGISTRY_IMAGE . #--platform linux/arm32v7
#     - docker push $CI_REGISTRY_IMAGE

