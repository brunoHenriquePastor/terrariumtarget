name: Pipeline CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest
    container: arm32v7/python:3
    defaults:
      run:
        working-directory: app
        shell: bash
    
    env:
        RUNNER_ARCH : ARM


    steps:

    - name: Login to Docker Hub
      if: github.event_name == 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - uses: docker/build-push-action@v2
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$("terrarium_target")
#   
   
    - name: Check Out Repo 
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v2


    - name: Setup Python
      uses: actions/setup-python@v4.2.0
      with:
        # Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset.
        python-version: # optional
          arm32v7/python:3
      
        cache: # optional
          x86

        architecture: # optional
          linux/arm32v7
        

    # - name: Build and push
    #   if: github.event_name == 'pull_request'
    #   id: docker_build
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: ./app
    #     file: ./app/Dockerfile
    #     push: true
    #     tags: ${{ secrets.DOCKER_USERNAME }}/app:${{ steps.buildnumber.outputs.build_number }}


  test:
    runs-on: ubuntu-latest
    needs: [build]
    container: my-image-name:$(date +%s)
    defaults:
      run:
        working-directory: app
        shell: bash
    
    env:
        RUNNER_ARCH : ARM



    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')
    - name: Analysing the code with doctest
      run: |
        - python -m doctest -v test/test_with_doctest.py 



  delivery:

    runs-on: ubuntu-latest
    needs: [code-test]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}




















# stages:
#   - build
#   - test
#   - delivery

# variables:
#   IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME

# build:
#   image: docker:latest 
#   services:
#     - docker:dind
#   stage: build

#   script:
#       - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
#       - docker buildx build --platform linux/arm,linux/arm64,linux/amd64 -t $IMAGE_NAME .
#   tags:
#     - docker


# test:
#   image: $IMAGE_NAME
#   stage: test
#   script:
#       - python -m doctest -v test/test_with_doctest.py 
#   tags:
#     - docker  

# delivery:
#   image: docker
#   stage: delivery
#   services:
#      - name: docker:dind
#   script:
#     - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD 
#     - docker buildx build --platform linux/arm,linux/arm64,linux/amd64 -t $CI_REGISTRY_IMAGE . #--platform linux/arm32v7
#     - docker push $CI_REGISTRY_IMAGE

